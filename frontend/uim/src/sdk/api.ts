// tslint:disable
/**
 * 统一身份管理服务
 * 提供身份管理服务以及OAuth2授权服务。身份管理服务包含用户管理、角色管理、权限管理等，OAuth2授权服务包含应用管理、应用授权模式与授权作用域管理等。
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: 845612500@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Authority
 */
export interface Authority {
    /**
     * 
     * @type {number}
     * @memberof Authority
     */
    aid?: number;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    authorityName?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    authorityDescription?: string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    uid?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    logo?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<ClientScope>}
     * @memberof Client
     */
    scopes?: Array<ClientScope>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    cid?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Client
     */
    extra?: { [key: string]: object; };
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    resources?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    grantTypes?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    accessTokenValidity?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    refreshTokenValidity?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    redirectUri?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    secret?: string;
}
/**
 * 
 * @export
 * @interface ClientScope
 */
export interface ClientScope {
    /**
     * 
     * @type {boolean}
     * @memberof ClientScope
     */
    autoApprove?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    subtitle?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientScope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface GrantType
 */
export interface GrantType {
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof GrantType
     */
    tid?: number;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface OAuth2AccessToken
 */
export interface OAuth2AccessToken {
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    expiration?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2AccessToken
     */
    scope?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    tokenType?: string;
    /**
     * 
     * @type {number}
     * @memberof OAuth2AccessToken
     */
    expiresIn?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OAuth2AccessToken
     */
    expired?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2AccessToken
     */
    additionalInformation?: { [key: string]: object; };
    /**
     * 
     * @type {OAuth2RefreshToken}
     * @memberof OAuth2AccessToken
     */
    refreshToken?: OAuth2RefreshToken;
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface OAuth2Client
 */
export interface OAuth2Client {
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    logo?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2Client
     */
    additionalInformation?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    updatedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof OAuth2Client
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof OAuth2Client
     */
    uid?: number;
    /**
     * 
     * @type {Array<OAuth2ClientScope>}
     * @memberof OAuth2Client
     */
    scopes?: Array<OAuth2ClientScope>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    redirect?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OAuth2Client
     */
    approved?: boolean;
    /**
     * 
     * @type {PublicUser}
     * @memberof OAuth2Client
     */
    user?: PublicUser;
    /**
     * 
     * @type {number}
     * @memberof OAuth2Client
     */
    accessTokenValiditySeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof OAuth2Client
     */
    refreshTokenValiditySeconds?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OAuth2Client
     */
    registeredRedirectUri?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    clientSecret?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2Client
     */
    cid?: string;
}
/**
 * 
 * @export
 * @interface OAuth2ClientScope
 */
export interface OAuth2ClientScope {
    /**
     * 
     * @type {number}
     * @memberof OAuth2ClientScope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientScope
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientScope
     */
    subtitle?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ClientScope
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OAuth2ClientScope
     */
    approved?: boolean;
}
/**
 * 
 * @export
 * @interface OAuth2RefreshToken
 */
export interface OAuth2RefreshToken {
    /**
     * 
     * @type {string}
     * @memberof OAuth2RefreshToken
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    nickname?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicUser
     */
    uid?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicUser
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    unlockedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    createdAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface QueryResultsClientNumber
 */
export interface QueryResultsClientNumber {
    /**
     * 
     * @type {number}
     * @memberof QueryResultsClientNumber
     */
    count?: number;
    /**
     * 
     * @type {Array<Client>}
     * @memberof QueryResultsClientNumber
     */
    data?: Array<Client>;
}
/**
 * 
 * @export
 * @interface QueryResultsUserNumber
 */
export interface QueryResultsUserNumber {
    /**
     * 
     * @type {number}
     * @memberof QueryResultsUserNumber
     */
    count?: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof QueryResultsUserNumber
     */
    data?: Array<User>;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    rid?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    roleName?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    roleDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    subtitle?: string;
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    uid?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    accountExpiredAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    credentialsExpiredAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    unlockedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    enabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof User
     */
    roles?: Array<UserRole>;
}
/**
 * 
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     * 
     * @type {boolean}
     * @memberof UserRole
     */
    expired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    expiredAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    roleName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    roleDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRole
     */
    rid?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes: async (cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling addClientGrantTypes.');
            }
            // verify required parameter 'tid' is not null or undefined
            if (tid === null || tid === undefined) {
                throw new RequiredError('tid','Required parameter tid was null or undefined when calling addClientGrantTypes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes: async (cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling addClientScopes.');
            }
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling addClientScopes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes: async (uid: number, cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling addUserClientGrantTypes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling addUserClientGrantTypes.');
            }
            // verify required parameter 'tid' is not null or undefined
            if (tid === null || tid === undefined) {
                throw new RequiredError('tid','Required parameter tid was null or undefined when calling addUserClientGrantTypes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes: async (uid: number, cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling addUserClientScopes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling addUserClientScopes.');
            }
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling addUserClientScopes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling createClient.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createClient.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling createClient.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling createClient.');
            }
            // verify required parameter 'scopes' is not null or undefined
            if (scopes === null || scopes === undefined) {
                throw new RequiredError('scopes','Required parameter scopes was null or undefined when calling createClient.');
            }
            // verify required parameter 'grantTypes' is not null or undefined
            if (grantTypes === null || grantTypes === undefined) {
                throw new RequiredError('grantTypes','Required parameter grantTypes was null or undefined when calling createClient.');
            }
            const localVarPath = `/u/v1/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }

            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }

            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }

            if (additionalInformation !== undefined) {
                localVarQueryParameter['additionalInformation'] = additionalInformation;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient1: async (uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling createClient1.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createClient1.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling createClient1.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling createClient1.');
            }
            // verify required parameter 'scopes' is not null or undefined
            if (scopes === null || scopes === undefined) {
                throw new RequiredError('scopes','Required parameter scopes was null or undefined when calling createClient1.');
            }
            // verify required parameter 'grantTypes' is not null or undefined
            if (grantTypes === null || grantTypes === undefined) {
                throw new RequiredError('grantTypes','Required parameter grantTypes was null or undefined when calling createClient1.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用于基础验证及邮箱验证之前。
         * @summary 获取图形验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommonCode: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/code/common`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取邮箱更改验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailCode: async (code: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling createEmailCode.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling createEmailCode.');
            }
            const localVarPath = `/u/v1/code/email`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取邮箱注册验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode: async (code: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling createRegistrationCode.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling createRegistrationCode.');
            }
            const localVarPath = `/u/v1/code/registration`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建会话
         * @summary 登入
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (login: string, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            if (login === null || login === undefined) {
                throw new RequiredError('login','Required parameter login was null or undefined when calling createSession.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling createSession.');
            }
            const localVarPath = `/u/v1/session`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建新用户，用户名和邮箱不可重复。
         * @summary 注册用户
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (username: string, password: string, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling createUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling createUser.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling createUser.');
            }
            const localVarPath = `/u/v1/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除权限
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities: async (id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAuthorities.');
            }
            const localVarPath = `/u/v1/authorities`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes: async (cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling deleteClientGrantTypes.');
            }
            // verify required parameter 'tid' is not null or undefined
            if (tid === null || tid === undefined) {
                throw new RequiredError('tid','Required parameter tid was null or undefined when calling deleteClientGrantTypes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes: async (tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tid' is not null or undefined
            if (tid === null || tid === undefined) {
                throw new RequiredError('tid','Required parameter tid was null or undefined when calling deleteGrantTypes.');
            }
            const localVarPath = `/u/v1/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities: async (rid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            if (rid === null || rid === undefined) {
                throw new RequiredError('rid','Required parameter rid was null or undefined when calling deleteRoleAuthorities.');
            }
            // verify required parameter 'authorityId' is not null or undefined
            if (authorityId === null || authorityId === undefined) {
                throw new RequiredError('authorityId','Required parameter authorityId was null or undefined when calling deleteRoleAuthorities.');
            }
            const localVarPath = `/u/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles: async (id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRoles.');
            }
            const localVarPath = `/u/v1/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopeAuthorities: async (sid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling deleteScopeAuthorities.');
            }
            // verify required parameter 'authorityId' is not null or undefined
            if (authorityId === null || authorityId === undefined) {
                throw new RequiredError('authorityId','Required parameter authorityId was null or undefined when calling deleteScopeAuthorities.');
            }
            const localVarPath = `/u/v1/scopes/{sid}/authorities`
                .replace(`{${"sid"}}`, encodeURIComponent(String(sid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes: async (id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteScopes.');
            }
            const localVarPath = `/u/v1/scopes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 销毁当前会话
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/session`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 销毁用户。注意，此方法将删除用户。
         * @summary 注销用户
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/u/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes: async (uid: number, cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling deleteUserClientGrantTypes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling deleteUserClientGrantTypes.');
            }
            // verify required parameter 'tid' is not null or undefined
            if (tid === null || tid === undefined) {
                throw new RequiredError('tid','Required parameter tid was null or undefined when calling deleteUserClientGrantTypes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除用户角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles: async (uid: number, id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling deleteUserRoles.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUserRoles.');
            }
            const localVarPath = `/u/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/authorities`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getAvatar.');
            }
            const localVarPath = `/u/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClient.');
            }
            const localVarPath = `/u/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient1: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getClient1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClient1.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClientGrantTypes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getClientLogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClientLogo.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo1: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClientLogo1.');
            }
            const localVarPath = `/u/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getClientScopes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients: async (uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getClients.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients1: async (q?: string, order?: Array<string>, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes: async (tid?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            if (rid === null || rid === undefined) {
                throw new RequiredError('rid','Required parameter rid was null or undefined when calling getRoleAuthorities.');
            }
            const localVarPath = `/u/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权作用域权限
         * @param {number} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopeAuthorities: async (sid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling getScopeAuthorities.');
            }
            const localVarPath = `/u/v1/scopes/{sid}/authorities`
                .replace(`{${"sid"}}`, encodeURIComponent(String(sid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/scopes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取当前会话信息
         * @summary 获取登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/session`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取当前用户身份
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/res/session`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getUser1.');
            }
            const localVarPath = `/u/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getUserClientGrantTypes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getUserClientGrantTypes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getUserClientScopes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getUserClientScopes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getUserRoles.');
            }
            const localVarPath = `/u/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查找用户
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (q?: string, offset?: number, limit?: number, order?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/u/v1/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling removeClient.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling removeClient.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient1: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling removeClient1.');
            }
            const localVarPath = `/u/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes: async (cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling removeClientScopes.');
            }
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling removeClientScopes.');
            }
            const localVarPath = `/u/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients: async (uid: number, cids: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling removeClients.');
            }
            // verify required parameter 'cids' is not null or undefined
            if (cids === null || cids === undefined) {
                throw new RequiredError('cids','Required parameter cids was null or undefined when calling removeClients.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients1: async (cids: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cids' is not null or undefined
            if (cids === null || cids === undefined) {
                throw new RequiredError('cids','Required parameter cids was null or undefined when calling removeClients1.');
            }
            const localVarPath = `/u/v1/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes: async (uid: number, cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling removeUserClientScopes.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling removeUserClientScopes.');
            }
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling removeUserClientScopes.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities: async (authority: Array<Authority>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authority' is not null or undefined
            if (authority === null || authority === undefined) {
                throw new RequiredError('authority','Required parameter authority was null or undefined when calling setAuthorities.');
            }
            const localVarPath = `/u/v1/authorities`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authority !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authority !== undefined ? authority : {}) : (authority || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes: async (grantType: Array<GrantType>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType','Required parameter grantType was null or undefined when calling setGrantTypes.');
            }
            const localVarPath = `/u/v1/types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof grantType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(grantType !== undefined ? grantType : {}) : (grantType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities: async (rid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            if (rid === null || rid === undefined) {
                throw new RequiredError('rid','Required parameter rid was null or undefined when calling setRoleAuthorities.');
            }
            // verify required parameter 'authorityId' is not null or undefined
            if (authorityId === null || authorityId === undefined) {
                throw new RequiredError('authorityId','Required parameter authorityId was null or undefined when calling setRoleAuthorities.');
            }
            const localVarPath = `/u/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles: async (role: Array<Role>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling setRoles.');
            }
            const localVarPath = `/u/v1/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof role !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(role !== undefined ? role : {}) : (role || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopeAuthorities: async (sid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sid' is not null or undefined
            if (sid === null || sid === undefined) {
                throw new RequiredError('sid','Required parameter sid was null or undefined when calling setScopeAuthorities.');
            }
            // verify required parameter 'authorityId' is not null or undefined
            if (authorityId === null || authorityId === undefined) {
                throw new RequiredError('authorityId','Required parameter authorityId was null or undefined when calling setScopeAuthorities.');
            }
            const localVarPath = `/u/v1/scopes/{sid}/authorities`
                .replace(`{${"sid"}}`, encodeURIComponent(String(sid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes: async (scope: Array<Scope>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling setScopes.');
            }
            const localVarPath = `/u/v1/scopes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof scope !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(scope !== undefined ? scope : {}) : (scope || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改或添加用户角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles: async (uid: number, userRole: Array<UserRole>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling setUserRoles.');
            }
            // verify required parameter 'userRole' is not null or undefined
            if (userRole === null || userRole === undefined) {
                throw new RequiredError('userRole','Required parameter userRole was null or undefined when calling setUserRoles.');
            }
            const localVarPath = `/u/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userRole !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userRole !== undefined ? userRole : {}) : (userRole || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar: async (uid: number, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateAvatar.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAvatar.');
            }
            const localVarPath = `/u/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity: async (cid: string, accessTokenValidity: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientAccessTokenValidity.');
            }
            // verify required parameter 'accessTokenValidity' is not null or undefined
            if (accessTokenValidity === null || accessTokenValidity === undefined) {
                throw new RequiredError('accessTokenValidity','Required parameter accessTokenValidity was null or undefined when calling updateClientAccessTokenValidity.');
            }
            const localVarPath = `/u/v1/clients/{cid}/access-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription: async (uid: number, cid: string, description: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateClientDescription.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientDescription.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling updateClientDescription.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/description`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription1: async (cid: string, description: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientDescription1.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling updateClientDescription1.');
            }
            const localVarPath = `/u/v1/clients/{cid}/description`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo: async (uid: number, cid: string, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateClientLogo.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientLogo.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateClientLogo.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo1: async (cid: string, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientLogo1.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateClientLogo1.');
            }
            const localVarPath = `/u/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName: async (cid: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientName.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateClientName.');
            }
            const localVarPath = `/u/v1/clients/{cid}/name`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName1: async (uid: number, cid: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateClientName1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientName1.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling updateClientName1.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/name`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri: async (cid: string, redirectUri: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientRedirectUri.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling updateClientRedirectUri.');
            }
            const localVarPath = `/u/v1/clients/{cid}/redirect`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri1: async (uid: number, cid: string, redirectUri: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateClientRedirectUri1.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientRedirectUri1.');
            }
            // verify required parameter 'redirectUri' is not null or undefined
            if (redirectUri === null || redirectUri === undefined) {
                throw new RequiredError('redirectUri','Required parameter redirectUri was null or undefined when calling updateClientRedirectUri1.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/redirect`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity: async (cid: string, refreshTokenValidity: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientRefreshTokenValidity.');
            }
            // verify required parameter 'refreshTokenValidity' is not null or undefined
            if (refreshTokenValidity === null || refreshTokenValidity === undefined) {
                throw new RequiredError('refreshTokenValidity','Required parameter refreshTokenValidity was null or undefined when calling updateClientRefreshTokenValidity.');
            }
            const localVarPath = `/u/v1/clients/{cid}/refresh-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateClientSecret.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientSecret.');
            }
            const localVarPath = `/u/v1/users/{uid}/clients/{cid}/secret`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret1: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientSecret1.');
            }
            const localVarPath = `/u/v1/clients/{cid}/secret`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus: async (cid: string, status: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling updateClientStatus.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling updateClientStatus.');
            }
            const localVarPath = `/u/v1/clients/{cid}/status`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail: async (uid: number, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateEmail.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling updateEmail.');
            }
            const localVarPath = `/u/v1/users/{uid}/email`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGender: async (uid: number, gender: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updateGender.');
            }
            // verify required parameter 'gender' is not null or undefined
            if (gender === null || gender === undefined) {
                throw new RequiredError('gender','Required parameter gender was null or undefined when calling updateGender.');
            }
            const localVarPath = `/u/v1/users/{uid}/gender`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (uid: number, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling updatePassword.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling updatePassword.');
            }
            const localVarPath = `/u/v1/users/{uid}/password`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addClientGrantTypes(cid, tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addClientScopes(cid, sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addUserClientGrantTypes(uid, cid, tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).addUserClientScopes(uid, cid, sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient1(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createClient1(uid, name, description, redirectUri, scopes, grantTypes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 用于基础验证及邮箱验证之前。
         * @summary 获取图形验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCommonCode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createCommonCode(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取邮箱更改验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailCode(code: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createEmailCode(code, email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取邮箱注册验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistrationCode(code: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createRegistrationCode(code, email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建会话
         * @summary 登入
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(login: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createSession(login, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建新用户，用户名和邮箱不可重复。
         * @summary 注册用户
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(username: string, password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createUser(username, password, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除权限
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorities(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteAuthorities(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteClientGrantTypes(cid, tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGrantTypes(tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteGrantTypes(tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteRoleAuthorities(rid, authorityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoles(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteRoles(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScopeAuthorities(sid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteScopeAuthorities(sid, authorityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScopes(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteScopes(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 销毁当前会话
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteSession(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 销毁用户。注意，此方法将删除用户。
         * @summary 注销用户
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteUser(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteUserClientGrantTypes(uid, cid, tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除用户角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRoles(uid: number, id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteUserRoles(uid, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorities(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authority>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getAuthorities(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatar(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getAvatar(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClient(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient1(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClient1(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientGrantTypes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientGrantTypes(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientLogo(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientLogo(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientLogo1(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientLogo1(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientScopes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClientScopes(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClientNumber>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClients(uid, q, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients1(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClientNumber>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getClients1(q, order, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrantTypes(tid?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getGrantTypes(tid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleAuthorities(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRoleAuthorities(rid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRoles(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取授权作用域权限
         * @param {number} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopeAuthorities(sid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getScopeAuthorities(sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopes(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getScopes(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取当前会话信息
         * @summary 获取登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSession(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取当前用户身份
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser1(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUser1(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientGrantTypes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserClientGrantTypes(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientScopes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserClientScopes(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRoles(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUserRoles(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 查找用户
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsUserNumber>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getUsers(q, offset, limit, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClient(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeClient(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClient1(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeClient1(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeClientScopes(cid, sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClients(uid: number, cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeClients(uid, cids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClients1(cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeClients1(cids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeUserClientScopes(uid, cid, sid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAuthorities(authority: Array<Authority>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setAuthorities(authority, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGrantTypes(grantType: Array<GrantType>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setGrantTypes(grantType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setRoleAuthorities(rid, authorityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoles(role: Array<Role>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setRoles(role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setScopeAuthorities(sid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setScopeAuthorities(sid, authorityId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setScopes(scope: Array<Scope>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setScopes(scope, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 修改或添加用户角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setUserRoles(uid, userRole, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAvatar(uid: number, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateAvatar(uid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientAccessTokenValidity(cid, accessTokenValidity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientDescription(uid: number, cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientDescription(uid, cid, description, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientDescription1(cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientDescription1(cid, description, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientLogo(uid: number, cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientLogo(uid, cid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientLogo1(cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientLogo1(cid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientName(cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientName(cid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientName1(uid: number, cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientName1(uid, cid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientRedirectUri(cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientRedirectUri(cid, redirectUri, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientRedirectUri1(uid: number, cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientRedirectUri1(uid, cid, redirectUri, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientRefreshTokenValidity(cid, refreshTokenValidity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientSecret(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientSecret(uid, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientSecret1(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientSecret1(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientStatus(cid: string, status: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateClientStatus(cid, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmail(uid: number, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateEmail(uid, code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGender(uid: number, gender: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateGender(uid, gender, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(uid: number, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updatePassword(uid, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).addClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).addClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加或修改应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).addUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): AxiosPromise<Client> {
            return DefaultApiFp(configuration).createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} scopes 
         * @param {Array<number>} grantTypes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient1(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, options?: any): AxiosPromise<Client> {
            return DefaultApiFp(configuration).createClient1(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 用于基础验证及邮箱验证之前。
         * @summary 获取图形验证码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommonCode(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createCommonCode(options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取邮箱更改验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailCode(code: string, email: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createEmailCode(code, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取邮箱注册验证码
         * @param {string} code 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode(code: string, email: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).createRegistrationCode(code, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建会话
         * @summary 登入
         * @param {string} login 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(login: string, password: string, options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).createSession(login, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建新用户，用户名和邮箱不可重复。
         * @summary 注册用户
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(username: string, password: string, code: string, options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).createUser(username, password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除权限
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities(id: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteAuthorities(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes(tid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles(id: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopeAuthorities(sid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteScopeAuthorities(sid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes(id: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 销毁当前会话
         * @summary 登出
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 销毁用户。注意，此方法将删除用户。
         * @summary 注销用户
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(uid: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除用户角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles(uid: number, id: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteUserRoles(uid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities(id?: Array<number>, options?: any): AxiosPromise<Array<Authority>> {
            return DefaultApiFp(configuration).getAuthorities(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatar(uid: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getAvatar(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(cid: string, options?: any): AxiosPromise<Client> {
            return DefaultApiFp(configuration).getClient(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient1(uid: number, cid: string, options?: any): AxiosPromise<Client> {
            return DefaultApiFp(configuration).getClient1(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes(cid: string, options?: any): AxiosPromise<Array<GrantType>> {
            return DefaultApiFp(configuration).getClientGrantTypes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo(uid: number, cid: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getClientLogo(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo1(cid: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getClientLogo1(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes(cid: string, options?: any): AxiosPromise<Array<Scope>> {
            return DefaultApiFp(configuration).getClientScopes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClientNumber> {
            return DefaultApiFp(configuration).getClients(uid, q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients1(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClientNumber> {
            return DefaultApiFp(configuration).getClients1(q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes(tid?: Array<number>, options?: any): AxiosPromise<Array<GrantType>> {
            return DefaultApiFp(configuration).getGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities(rid: number, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).getRoleAuthorities(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(id?: Array<number>, options?: any): AxiosPromise<Array<Role>> {
            return DefaultApiFp(configuration).getRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取授权作用域权限
         * @param {number} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopeAuthorities(sid: number, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).getScopeAuthorities(sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes(id?: Array<number>, options?: any): AxiosPromise<Array<Scope>> {
            return DefaultApiFp(configuration).getScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取当前会话信息
         * @summary 获取登录用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).getSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取当前用户身份
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1(uid: number, options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).getUser1(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes(uid: number, cid: string, options?: any): AxiosPromise<Array<GrantType>> {
            return DefaultApiFp(configuration).getUserClientGrantTypes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes(uid: number, cid: string, options?: any): AxiosPromise<Array<Scope>> {
            return DefaultApiFp(configuration).getUserClientScopes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles(uid: number, options?: any): AxiosPromise<Array<Role>> {
            return DefaultApiFp(configuration).getUserRoles(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查找用户
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): AxiosPromise<QueryResultsUserNumber> {
            return DefaultApiFp(configuration).getUsers(q, offset, limit, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient(uid: number, cid: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeClient(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient1(cid: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeClient1(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients(uid: number, cids: Array<string>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeClients(uid, cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients1(cids: Array<string>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeClients1(cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities(authority: Array<Authority>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setAuthorities(authority, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes(grantType: Array<GrantType>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setGrantTypes(grantType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles(role: Array<Role>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setRoles(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加授权作用域权限
         * @param {number} sid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopeAuthorities(sid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setScopeAuthorities(sid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes(scope: Array<Scope>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setScopes(scope, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改或添加用户角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setUserRoles(uid, userRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAvatar(uid: number, body: any, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateAvatar(uid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription(uid: number, cid: string, description: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientDescription(uid, cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription1(cid: string, description: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientDescription1(cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo(uid: number, cid: string, body: any, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientLogo(uid, cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo1(cid: string, body: any, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientLogo1(cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName(cid: string, name: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientName(cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName1(uid: number, cid: string, name: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientName1(uid, cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri(cid: string, redirectUri: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientRedirectUri(cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri1(uid: number, cid: string, redirectUri: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientRedirectUri1(uid, cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(uid: number, cid: string, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).updateClientSecret(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret1(cid: string, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).updateClientSecret1(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus(cid: string, status: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateClientStatus(cid, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail(uid: number, code: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateEmail(uid, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGender(uid: number, gender: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateGender(uid, gender, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(uid: number, password: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updatePassword(uid, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 添加或修改应用授权模式
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addClientGrantTypes(cid: string, tid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).addClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加应用授权作用域
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addClientScopes(cid: string, sid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).addClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加或修改应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).addUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建应用
     * @param {number} uid 
     * @param {string} name 
     * @param {string} description 
     * @param {string} redirectUri 
     * @param {Array<number>} scopes 
     * @param {Array<number>} grantTypes 
     * @param {number} [accessTokenValidity] 
     * @param {number} [refreshTokenValidity] 
     * @param {string} [additionalInformation] 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createClient(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any) {
        return DefaultApiFp(this.configuration).createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建应用
     * @param {number} uid 
     * @param {string} name 
     * @param {string} description 
     * @param {string} redirectUri 
     * @param {Array<number>} scopes 
     * @param {Array<number>} grantTypes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createClient1(uid: number, name: string, description: string, redirectUri: string, scopes: Array<number>, grantTypes: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).createClient1(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用于基础验证及邮箱验证之前。
     * @summary 获取图形验证码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCommonCode(options?: any) {
        return DefaultApiFp(this.configuration).createCommonCode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取邮箱更改验证码
     * @param {string} code 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEmailCode(code: string, email: string, options?: any) {
        return DefaultApiFp(this.configuration).createEmailCode(code, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取邮箱注册验证码
     * @param {string} code 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRegistrationCode(code: string, email: string, options?: any) {
        return DefaultApiFp(this.configuration).createRegistrationCode(code, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建会话
     * @summary 登入
     * @param {string} login 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSession(login: string, password: string, options?: any) {
        return DefaultApiFp(this.configuration).createSession(login, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建新用户，用户名和邮箱不可重复。
     * @summary 注册用户
     * @param {string} username 
     * @param {string} password 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(username: string, password: string, code: string, options?: any) {
        return DefaultApiFp(this.configuration).createUser(username, password, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除权限
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAuthorities(id: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteAuthorities(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用授权模式
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除授权模式
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteGrantTypes(tid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除角色权限
     * @param {number} rid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除角色
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRoles(id: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteRoles(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除授权作用域权限
     * @param {number} sid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScopeAuthorities(sid: number, authorityId: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteScopeAuthorities(sid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除授权作用域
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScopes(id: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteScopes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 销毁当前会话
     * @summary 登出
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSession(options?: any) {
        return DefaultApiFp(this.configuration).deleteSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 销毁用户。注意，此方法将删除用户。
     * @summary 注销用户
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(uid: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除用户角色
     * @param {number} uid 
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUserRoles(uid: number, id: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).deleteUserRoles(uid, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取权限
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthorities(id?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getAuthorities(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户头像
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAvatar(uid: number, options?: any) {
        return DefaultApiFp(this.configuration).getAvatar(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClient(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClient(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClient1(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClient1(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用授权模式
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientGrantTypes(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClientGrantTypes(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用Logo
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientLogo(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClientLogo(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用Logo
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientLogo1(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClientLogo1(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用授权作用域
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientScopes(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getClientScopes(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询应用
     * @param {number} uid 
     * @param {string} [q] 
     * @param {Array<string>} [order] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getClients(uid, q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询应用
     * @param {string} [q] 
     * @param {Array<string>} [order] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClients1(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getClients1(q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取授权模式
     * @param {Array<number>} [tid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGrantTypes(tid?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色权限
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoleAuthorities(rid: number, options?: any) {
        return DefaultApiFp(this.configuration).getRoleAuthorities(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoles(id?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getRoles(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取授权作用域权限
     * @param {number} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScopeAuthorities(sid: number, options?: any) {
        return DefaultApiFp(this.configuration).getScopeAuthorities(sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取授权作用域
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScopes(id?: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).getScopes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取当前会话信息
     * @summary 获取登录用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSession(options?: any) {
        return DefaultApiFp(this.configuration).getSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取当前用户身份
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(options?: any) {
        return DefaultApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser1(uid: number, options?: any) {
        return DefaultApiFp(this.configuration).getUser1(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserClientGrantTypes(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getUserClientGrantTypes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserClientScopes(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).getUserClientScopes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户角色
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserRoles(uid: number, options?: any) {
        return DefaultApiFp(this.configuration).getUserRoles(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查找用户
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {Array<string>} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).getUsers(q, offset, limit, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeClient(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).removeClient(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeClient1(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).removeClient1(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用授权作用域
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeClientScopes(cid: string, sid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).removeClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用
     * @param {number} uid 
     * @param {Array<string>} cids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeClients(uid: number, cids: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).removeClients(uid, cids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用
     * @param {Array<string>} cids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeClients1(cids: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).removeClients1(cids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).removeUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setAuthorities(authority: Array<Authority>, options?: any) {
        return DefaultApiFp(this.configuration).setAuthorities(authority, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setGrantTypes(grantType: Array<GrantType>, options?: any) {
        return DefaultApiFp(this.configuration).setGrantTypes(grantType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加角色权限
     * @param {number} rid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).setRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加角色
     * @param {Array<Role>} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setRoles(role: Array<Role>, options?: any) {
        return DefaultApiFp(this.configuration).setRoles(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加授权作用域权限
     * @param {number} sid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setScopeAuthorities(sid: number, authorityId: Array<number>, options?: any) {
        return DefaultApiFp(this.configuration).setScopeAuthorities(sid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setScopes(scope: Array<Scope>, options?: any) {
        return DefaultApiFp(this.configuration).setScopes(scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改或添加用户角色
     * @param {number} uid 
     * @param {Array<UserRole>} userRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setUserRoles(uid: number, userRole: Array<UserRole>, options?: any) {
        return DefaultApiFp(this.configuration).setUserRoles(uid, userRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新用户头像
     * @param {number} uid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAvatar(uid: number, body: any, options?: any) {
        return DefaultApiFp(this.configuration).updateAvatar(uid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用AccessToken有效期
     * @param {string} cid 
     * @param {number} accessTokenValidity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any) {
        return DefaultApiFp(this.configuration).updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用描述
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientDescription(uid: number, cid: string, description: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientDescription(uid, cid, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用描述
     * @param {string} cid 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientDescription1(cid: string, description: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientDescription1(cid, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用Logo
     * @param {number} uid 
     * @param {string} cid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientLogo(uid: number, cid: string, body: any, options?: any) {
        return DefaultApiFp(this.configuration).updateClientLogo(uid, cid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用Logo
     * @param {string} cid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientLogo1(cid: string, body: any, options?: any) {
        return DefaultApiFp(this.configuration).updateClientLogo1(cid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用名称
     * @param {string} cid 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientName(cid: string, name: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientName(cid, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用名称
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientName1(uid: number, cid: string, name: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientName1(uid, cid, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用回调地址
     * @param {string} cid 
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientRedirectUri(cid: string, redirectUri: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientRedirectUri(cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用回调地址
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientRedirectUri1(uid: number, cid: string, redirectUri: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientRedirectUri1(uid, cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid 
     * @param {number} refreshTokenValidity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any) {
        return DefaultApiFp(this.configuration).updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用密钥
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientSecret(uid: number, cid: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientSecret(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用密钥
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientSecret1(cid: string, options?: any) {
        return DefaultApiFp(this.configuration).updateClientSecret1(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新应用状态
     * @param {string} cid 
     * @param {number} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateClientStatus(cid: string, status: number, options?: any) {
        return DefaultApiFp(this.configuration).updateClientStatus(cid, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新用户邮箱
     * @param {number} uid 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEmail(uid: number, code: string, options?: any) {
        return DefaultApiFp(this.configuration).updateEmail(uid, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新用户性别
     * @param {number} uid 
     * @param {number} gender 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateGender(uid: number, gender: number, options?: any) {
        return DefaultApiFp(this.configuration).updateGender(uid, gender, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新用户密码
     * @param {number} uid 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePassword(uid: number, password: string, options?: any) {
        return DefaultApiFp(this.configuration).updatePassword(uid, password, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * OAuth2Api - axios parameter creator
 * @export
 */
export const OAuth2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授权
         * @param {boolean} approved 
         * @param {Array<string>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrDeny: async (approved: boolean, scope: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'approved' is not null or undefined
            if (approved === null || approved === undefined) {
                throw new RequiredError('approved','Required parameter approved was null or undefined when calling approveOrDeny.');
            }
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling approveOrDeny.');
            }
            const localVarPath = `/u/v1/oauth/authorization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (scope) {
                localVarQueryParameter['scope'] = scope;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取应用信息
         * @summary 预授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize: async (clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling authorize.');
            }
            const localVarPath = `/u/v1/oauth/authorization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (scope) {
                localVarQueryParameter['scope'] = scope;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 颁发令牌
         * @param {string} code 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken: async (code: string, grantType?: string, redirectUri?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling grantToken.');
            }
            const localVarPath = `/u/v1/oauth/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuth2Api - functional programming interface
 * @export
 */
export const OAuth2ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授权
         * @param {boolean} approved 
         * @param {Array<string>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveOrDeny(approved: boolean, scope: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await OAuth2ApiAxiosParamCreator(configuration).approveOrDeny(approved, scope, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取应用信息
         * @summary 预授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorize(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client>> {
            const localVarAxiosArgs = await OAuth2ApiAxiosParamCreator(configuration).authorize(clientId, responseType, redirectUri, scope, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 颁发令牌
         * @param {string} code 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantToken(code: string, grantType?: string, redirectUri?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>> {
            const localVarAxiosArgs = await OAuth2ApiAxiosParamCreator(configuration).grantToken(code, grantType, redirectUri, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OAuth2Api - factory interface
 * @export
 */
export const OAuth2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 授权
         * @param {boolean} approved 
         * @param {Array<string>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrDeny(approved: boolean, scope: Array<string>, options?: any): AxiosPromise<string> {
            return OAuth2ApiFp(configuration).approveOrDeny(approved, scope, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取应用信息
         * @summary 预授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, options?: any): AxiosPromise<OAuth2Client> {
            return OAuth2ApiFp(configuration).authorize(clientId, responseType, redirectUri, scope, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 颁发令牌
         * @param {string} code 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken(code: string, grantType?: string, redirectUri?: string, options?: any): AxiosPromise<OAuth2AccessToken> {
            return OAuth2ApiFp(configuration).grantToken(code, grantType, redirectUri, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuth2Api - object-oriented interface
 * @export
 * @class OAuth2Api
 * @extends {BaseAPI}
 */
export class OAuth2Api extends BaseAPI {
    /**
     * 
     * @summary 授权
     * @param {boolean} approved 
     * @param {Array<string>} scope 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public approveOrDeny(approved: boolean, scope: Array<string>, options?: any) {
        return OAuth2ApiFp(this.configuration).approveOrDeny(approved, scope, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取应用信息
     * @summary 预授权
     * @param {string} clientId 
     * @param {string} [responseType] 
     * @param {string} [redirectUri] 
     * @param {Array<string>} [scope] 
     * @param {string} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public authorize(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, options?: any) {
        return OAuth2ApiFp(this.configuration).authorize(clientId, responseType, redirectUri, scope, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 颁发令牌
     * @param {string} code 
     * @param {string} [grantType] 
     * @param {string} [redirectUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuth2Api
     */
    public grantToken(code: string, grantType?: string, redirectUri?: string, options?: any) {
        return OAuth2ApiFp(this.configuration).grantToken(code, grantType, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

}


